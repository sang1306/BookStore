@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
	string trashIcon = "<svg xmlns='http://www.w3.org/2000/svg' width='24' height='24' style='color:white' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round' class='lucide lucide-trash-2'><path d='M3 6h18' /><path d='M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6' /><path d='M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2' /><line x1='10' x2='10' y1='11' y2='17' /><line x1='14' x2='14' y1='11' y2='17' /></svg>";
}
<style>
	.cart-thumbnail {
		max-width: 100px;
		height: auto;
	}

	.quantity-input {
		width: 60px;
	}

	.remove-item {
		color: #6c757d;
		cursor: pointer;
	}

		.remove-item:hover {
			color: #dc3545;
		}

	.coupon-input {
		max-width: 250px;
	}

	.cart-header {
		border-bottom: 1px solid #dee2e6;
		padding-bottom: 0.5rem;
		margin-bottom: 1.5rem;
	}
</style>

<div class="container py-5">
	<div class="row">
		<div class="col-12">
			<h1 class="cart-header display-6 mb-4">Cart</h1>
		</div>
	</div>

	<div class="row">
		<!-- Cart Items Section - Left Column -->
		<div class="col-lg-8 mb-4">
			<div class="card mb-4 border-0 bg-light">
				<div class="card-body p-0">
					<table class="table mb-0">
						<thead>
							<tr class="table-light">
								<th class="py-3">Thumbnail</th>
								<th class="py-3">Product Title</th>
								<th class="py-3">Price</th>
								<th class="py-3">Quantity</th>
								<th class="py-3">Total</th>
								<th class="py-3"></th>
							</tr>
						</thead>
						<tbody>
							@foreach (BookStore.Dtos.OrderDto.CartItemDetail item in ViewBag.CartBooks)
							{
								var book = item.Book;
								var quantity = item.Quantity;

								<tr>
									<td class="align-middle">
										<img src="@book.Image"
											 alt="Book cover" class="cart-thumbnail">
									</td>
									<td class="align-middle">@book.Title</td>
									<td class="align-middle">@book.Price.Value.ToString("N0") ₫</td>
									<td class="align-middle">
										<input type="number"
											   class="form-control quantity-input"
											   value="@quantity"
											   min="1"
											   onchange="updateCartQuantity(@book.BookId, this.value)">
									</td>
									<td class="align-middle">@((book.Price * quantity).Value.ToString("N0")) ₫</td>
									<td class="align-middle text-center">
										<i class="bi bi-x-lg remove-item"></i>
									</td>

									<td class="align-middle text-center"><button class="btn btn-secondary" onclick="removeItem(@book.BookId)">@Html.Raw(trashIcon)</button> </td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>


			<!-- Return to Shop Button -->
			<div class="mt-4">
				<a asp-action="index" asp-controller="home" class="btn btn-outline-secondary">
					<i class="bi bi-arrow-left me-2"></i>Return To Shop
				</a>
			</div>
		</div>

		<!-- Order Summary Section - Right Column -->
		<div class="col-lg-4">
			<div class="card border-0 shadow-sm">
				<div class="card-body">
					<h3 class="mb-4">Order Detail</h3>

					<!-- Subtotal -->
					<div class="d-flex justify-content-between mb-3">
						<span>Subtotal</span>
						<span class="fw-bold" id="subtotal"> ₫</span>
					</div>

					<!-- Shipping Options -->
					<div class="mb-3">
						<p class="mb-2">Shipping</p>
						<div class="form-check mb-2">
							<input class="form-check-input" type="radio" name="shipping" id="shipping1">
							<label class="form-check-label" for="shipping1">
								Standard Shipping: 35,000 ₫
							</label>
						</div>
						<div class="form-check mb-2">
							<input class="form-check-input" type="radio" name="shipping" id="shipping2" checked>
							<label class="form-check-label" for="shipping2">
								Local pickup (available at Bluish after 12pm of next working day)
							</label>
						</div>
						<small class="text-muted">Shipping options will be updated during checkout.</small>
					</div>

					<hr>

					<!-- Total -->
					<div class="d-flex justify-content-between mb-4">
						<span class="fw-bold">Total</span>
						<span class="fw-bold" id="total">00 ₫</span>
					</div>

					<!-- Checkout Button -->
					<a asp-action="index" asp-controller="checkout" class="btn btn-success w-100 py-2">Go To Secure Checkout</a>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	var subtotal= @(ViewBag.Subtotal);
	console.log(subtotal);
	var subtotalview = document.getElementById("subtotal");
	subtotalview.innerText = subtotal.toLocaleString('vi-VN') + " ₫";
	// subtotalview.innerText = subtotal + " ₫";

	console.log(subtotal);


	document.addEventListener('DOMContentLoaded', updateTotal());

	function updateTotal(){
		  const shippingOptions = document.querySelectorAll('input[name="shipping"]');
	const totalElement = document.getElementById('total');
	// Assuming subtotal is defined elsewhere - add a fallback just in case
	let baseTotal = (typeof subtotal !== 'undefined') ? subtotal : 0;

	// Initial update based on currently selected option
	let selectedOption = document.querySelector('input[name="shipping"]:checked');
	let initialShippingCost = 0;

	if (selectedOption) {
	  if (selectedOption.id === 'shipping1') {
		initialShippingCost = 35000; // Standard Shipping
	  } else if (selectedOption.id === 'shipping2') {
		initialShippingCost = 0; // Local Pickup
	  }
	}

	totalElement.innerText = `${(baseTotal + initialShippingCost).toLocaleString()} ₫`;

	// Set up event listeners (only once per option)
	shippingOptions.forEach(option => {
	  option.addEventListener('change', function() {
		let shippingCost = 0;
		if (this.id === 'shipping1') {
		  shippingCost = 35000; // Standard Shipping
		} else if (this.id === 'shipping2') {
		  shippingCost = 0; // Local Pickup (free)
		}
		const newTotal = baseTotal + shippingCost;
		totalElement.innerText = `${newTotal.toLocaleString()} ₫`;
	  });
	});


	}
	function updateTotal2(){
		const shippingOptions = document.querySelectorAll('input[name="shipping"]');
		const totalElement = document.getElementById('total');
		let baseTotal = subtotal; // Initial total amount (without shipping)
		let shippingCost = 0;

		shippingOptions.forEach(option => {
			if (option.checked) {
				shippingCost = option.id === 'shipping1' ? 35000 : 0;
			}
		});

		const newTotal = baseTotal + shippingCost;
		totalElement.innerText = `${newTotal.toLocaleString('vi-VN')} ₫`;
	}

	function updateCartQuantity(bookId, quantity) {
		var sendData = {
			bookId : bookId,
			quantity: quantity
		}

		fetch('/UpdateCartQuantity', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ bookId: bookId, quantity: quantity }),
		})
		.then(response => response.json())
		.then(data => {
			if (data.success) {
				loadCartCount();
				// Update the total for this item
				const itemRow = document.querySelector(`input[onchange="updateCartQuantity(${bookId}, this.value)"]`).closest('tr');
				const itemTotalCell = itemRow.querySelector('td:nth-child(5)');
				itemTotalCell.innerText = `${data.itemTotal}₫`;


				// Update the subtotal
				const subtotalview = document.getElementById("subtotal");
				subtotalview.innerText = data.subtotal.toLocaleString('vi-VN') + " ₫";
				subtotal = data.subtotal;
				updateTotal2();
			} else {
				alert(data.message);
				console.error('Failed to update cart.');
			}
		})
		.catch(error => console.error('Error:', error));
	}
	function removeItem(bookId){

		console.log(bookId);
		fetch('/RemoveFromCart', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({ bookId: bookId}),
		})	.then(response => response.json())
			.then(data => {
				console.log(data);
				window.location.reload(true);
			})
			.catch((err) => {
				console.log(err);

			})
	}


</script>

